using System;
using Microsoft.CodeAnalysis.CSharp.Scripting.Hosting;
using Microsoft.CodeAnalysis.Scripting.Hosting;
using System.Runtime.Loader;
using System.Threading.Tasks;
using static System.Console;
using System.Reflection;
using System.IO;

namespace dotnetPublishCode
{
    class Program
    {
        static async Task<int> Main(string[] args)
        {
            try
            {
                var globals = new CommandLineScriptGlobals(Console.Out, CSharpObjectFormatter.Instance);
                foreach (var arg in args)
                    globals.Args.Add(arg);

                var assembly = AssemblyLoadContext.Default.LoadFromAssemblyName(new AssemblyName("scriptAssembly"));
                var type = assembly.GetType("Submission#0");
                var factoryMethod = type.GetMethod("<Factory>");
                if (factoryMethod == null) throw new Exception("couldn't find factory method to initiate script");

                var invokeTask = factoryMethod.Invoke(null, new object[] { new object[] { globals, null } }) as Task<int>;
                var invokeResult = await invokeTask;
                if (invokeResult != 0)
                {
                    WritePrettyError($"Error result: '{invokeResult}'");
                    return 0x1;
                }

                return 0;
            }
            catch (Exception ex)
            {
                if (ex is AggregateException aggregateEx)
                {
                    ex = aggregateEx.Flatten().InnerException;
                }
                WritePrettyError(ex.ToString());
                return 0x1;
            }
        }

        public static void WritePrettyError(string value)
        {
            Console.ForegroundColor = ConsoleColor.Red;
            Error.WriteLine(value.TrimEnd(Environment.NewLine.ToCharArray()));
            Console.ResetColor();
        }
    }
}